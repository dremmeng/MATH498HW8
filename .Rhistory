knitr::opts_chunk$set(echo = TRUE)
load("~/School/MATH498/HW8/CO2IceCore.rda")
Y<- t(W)
x<- uGrid
ind<-(1:160)+ (500-160)
Y0<- Y[ ind, (1:10)+3  ]
x<- x[ind]
Y<- Y0
# Y now is what you will work on
matplot( x, Y, type="l", lty=1)
ind <- apply( Y, 2, which.max)
parCenterOLD<- x[ind]
parAlphaOLD<- rep( 1,ncol(Y))
templateGrid <- seq(-50,50, length.out = 500)
# starting shape for the template
templateStart <- list(x = templateGrid,
y = exp(-abs(templateGrid)/8)  )
template<- templateStart
xline( parCenterOLD, col="black", lwd=2)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/School/MATH498/HW8/")
suppressMessages(library(fields))
source("estimationScriptTest.R")
shiftTemplate <- function(x, center, template) {
splint(template$x + center, template$y, x)
}
#
#
set.seed(123)
x<- 1:100
n<- length(x)
L<- 10
trueCenter<- runif(L,1,100)
trueScale<- 4*(trueCenter/100)^2 + 2
Y0<- matrix(NA, n,L)
constant<- dnorm(0, sd=5) # maximum of N(0,1)
for( k in 1:L){
Y0[,k]<- dnorm(x, mean=trueCenter[k], sd= 5)*trueScale[k]/constant
}
set.seed(112)
Y<- Y0 + .1*matrix( rnorm(L*n),n,L)
matplot( x,  Y , type = "b",  col = rainbow(L), pch=16,
lwd = 2, lty = 1 , cex=.5)
title("Raw data")
templateGrid <- seq(-50,50, length.out = 500)
# starting shape for the template
templateStart <- list(x = templateGrid,
y = exp(-abs(templateGrid)/10)  )
ind <- apply( Y, 2, which.max)
parCenterOLD<- x[ind]
parAlphaOLD<- rep( 1,ncol(Y))
template<- templateStart
DFBump<-15
look<- register( x, Y, parAlphaOLD, parCenterOLD, template, DFBump )
####source("estimationScript.R")
fields.style()
plot( look$template, type="l", xlab="x", ylab="Template", lwd=2 )
lines( templateStart, col="3", lwd=2)
title("estimated template")
# data with superimposed shifted and scaled template
matplot(
x, Y , type = "l", pch = 16, col = "grey",
lwd = 2, lty = 1 )
xline( look$parCenter, col="green2")
for( k in 1: ncol(Y)){
lines(x, look$parAlpha[k] * shiftTemplate(x,  look$parCenter[k], look$template ) )
}
load("~/School/MATH498/HW8/CO2IceCore.rda")
Y<- t(W)
x<- uGrid
ind<-(1:160)+ (500-160)
Y0<- Y[ ind, (1:10)+3  ]
x<- x[ind]
Y<- Y0
# Y now is what you will work on
matplot( x, Y, type="l", lty=1)
ind <- apply( Y, 2, which.max)
parCenterOLD<- x[ind]
parAlphaOLD<- rep( 1,ncol(Y))
templateGrid <- seq(-50,50, length.out = 500)
# starting shape for the template
templateStart <- list(x = templateGrid,
y = exp(-abs(templateGrid)/8)  )
template<- templateStart
xline( parCenterOLD, col="black", lwd=2)
DFBump<-10
look1<- register( x, Y, parAlphaOLD, parCenterOLD, template, DFBump )
#####source("estimationScript.R")
matplot(
x, Y , type = "l", pch = 16, col = "grey",
lwd = 2, lty = 1 )
xline( look$parCenter, col="green2")
for( k in 1: ncol(Y)){
lines(x, look$parAlpha[k] * shiftTemplate(x,  look$parCenter[k], look$template ) )
}
matplot(
x, Y , type = "l", pch = 16, col = "grey",
lwd = 2, lty = 1 )
xline( look1$parCenter, col="green2")
for( k in 1: ncol(Y)){
lines(x, look1$parAlpha[k] * shiftTemplate(x,  look$parCenter[k], look$template ) )
}
plot( look1$template, type="l", xlab="x", ylab="Template", lwd=2 )
lines( templateStart, col="3", lwd=2)
title("estimated template")
matplot(
x, Y , type = "l", pch = 16, col = "grey",
lwd = 2, lty = 1 )
xline( look1$parCenter, col="green2")
for( k in 1: ncol(Y)){
lines(x, look1$parAlpha[k] * shiftTemplate(x,  look$parCenter[k], look$template ) )
}
plot( look1$template, type="l", xlab="x", ylab="Template", lwd=2 )
lines( templateStart, col="3", lwd=2)
title("estimated template")
matplot(
x, Y , type = "l", pch = 16, col = "grey",
lwd = 2, lty = 1 )
xline( look1$parCenter, col="green2")
for( k in 1: ncol(Y)){
lines(x, look1$parAlpha[k] * shiftTemplate(x,  look1$parCenter[k], look1$template ) )
}
